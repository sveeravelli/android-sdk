#!/bin/bash

DATE=`date`
DATESTAMP=`date +%Y%m%d%H%M%S`

VERSION_REGEX='-v[0-9]+.[0-9]+.[0-9]+'

BEGIN_DIR=`pwd`
SCRIPT_DIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BASE_DIR=${SCRIPT_DIR}/../
SDK_DIR=${BASE_DIR}/sdk
SAMPLE_DIR=${BASE_DIR}/sample-apps
JAR_BASE="OoyalaSDK"
JAR_NAME="${JAR_BASE}.jar"
ZIP_BASE="${JAR_BASE}-Android"
ZIP_NAME="${ZIP_BASE}.zip"

GIT_CHECK_RESULT=true

AVD_NAME="unit_test"
ADB=${ANDROID_SDKS}/platform-tools/adb
EMULATOR=${ANDROID_SDKS}/tools/emulator
ANDROID=${ANDROID_SDKS}/tools/android

# Generate the docs
function doc {
  currdir=`pwd`
  cd ${SDK_DIR}
  echo
  echo "Removing Old Docs..."
  rm -rf Documentation/complete Documentation/public
  echo "Generating Public Docs..."
  javadoc -linkoffline http://d.android.com/reference file:${ANDROID_SDKS}/docs/reference @javadoc.public
  echo "Generating Complete Docs..."
  javadoc -linkoffline http://d.android.com/reference file:${ANDROID_SDKS}/docs/reference @javadoc.complete
  echo
  echo "Document Generation Complete!"
  echo
  cd ${currdir}
}

function git_check {
  cd ${BASE_DIR}
  if [[ "`git status | grep "working directory clean"`" = "" ]]; then
    GIT_CHECK_RESULT=false
    echo
    git status
    echo
    echo "Your working directory is dirty (Yuck!), are you sure you want to continue? (y/n)"
    read -n 1 cont
    if [[ "${cont}" != "y" ]]; then
      echo
      echo "Please commit or stash your changes and try again."
      exit 1
    fi
    echo
  fi
}

# Generate the release
function gen {
  echo "Generating the release..."
  git_check

  tests=true
  set_version=false
  push=false
  new_version=''
  for i in $*; do
    case "$i" in
      -notests|-notest|-nt) tests=false;;
      -push|-p) push=true;;
      *) if [[ "$i" =~ ${VERSION_REGEX} ]]; then set_version=true; new_version="`echo $i | sed s/-v//g`"; else echo "ERROR: invalid option: $i"; usage; fi;;
    esac
  done

  # Rev version number if requested
  if [[ ${set_version} = true ]]; then
    sed -i '' -e "s/\(SDK_VERSION *= *\)\".*\"/\1\"${new_version}\"/g" ${SDK_DIR}/src/com/ooyala/android/Constants.java
  fi

  # Run tests before doing anything to make sure we are passing.
  if [[ ${tests} = true ]]; then
    tests
  fi

  cd ${BASE_DIR}
  rm -rf ${ZIP_BASE}
  mkdir ${ZIP_BASE}

  #create jar
  cd ${SDK_DIR}
  ant clean
  ant release
  cp bin/classes.jar ${BASE_DIR}/${ZIP_BASE}/${JAR_NAME}

  #update sample apps
  cp ${BASE_DIR}/${ZIP_BASE}/${JAR_NAME} ${SAMPLE_DIR}/GettingStartedSampleApp/libs/
  cp ${BASE_DIR}/${ZIP_BASE}/${JAR_NAME} ${SAMPLE_DIR}/ChannelBrowserSampleApp/libs/
  cp ${BASE_DIR}/${ZIP_BASE}/${JAR_NAME} ${SAMPLE_DIR}/OOView/libs/

  #copy sample apps
  cd ${BASE_DIR}
  cp -R ${SAMPLE_DIR} ${ZIP_BASE}/SampleApps

  mkdir ${ZIP_BASE}/DefaultControlsSource
  cp ${SDK_DIR}/src/com/ooyala/android/AbstractDefaultOoyalaPlayerControls.java ${ZIP_BASE}/DefaultControlsSource
  cp ${SDK_DIR}/src/com/ooyala/android/AbstractOoyalaPlayerLayoutController.java ${ZIP_BASE}/DefaultControlsSource
  cp ${SDK_DIR}/src/com/ooyala/android/DefaultOoyalaPlayerFullscreenControls.java ${ZIP_BASE}/DefaultControlsSource
  cp ${SDK_DIR}/src/com/ooyala/android/DefaultOoyalaPlayerInlineControls.java ${ZIP_BASE}/DefaultControlsSource
  cp ${SDK_DIR}/src/com/ooyala/android/Images.java ${ZIP_BASE}/DefaultControlsSource
  cp ${SDK_DIR}/src/com/ooyala/android/LayoutController.java ${ZIP_BASE}/DefaultControlsSource
  cp ${SDK_DIR}/src/com/ooyala/android/OoyalaPlayerControls.java ${ZIP_BASE}/DefaultControlsSource
  cp ${SDK_DIR}/src/com/ooyala/android/OoyalaPlayerLayoutController.java ${ZIP_BASE}/DefaultControlsSource
  cp ${SDK_DIR}/src/com/ooyala/android/OptimizedOoyalaPlayerLayoutController.java ${ZIP_BASE}/DefaultControlsSource

  #getting started guide and release notes
  cp getting_started.pdf ${ZIP_BASE}/
  cp ReleaseNotes.txt ${ZIP_BASE}/

  #version file
  version=`cat src/com/ooyala/android/Constants.java |grep "SDK_VERSION" |awk '{print $7}' |sed 's/"\([0-9]*\.[0-9]*\.[0-9]*\)";/\1/'`
  echo "v${version}" >> ${ZIP_BASE}/VERSION
  echo "Created On: ${DATE}" >> ${ZIP_BASE}/VERSION

  #docs
  doc
  cp -R sdk/Documentation/public ${BASE_DIR}/${ZIP_BASE}/Documentation

  #zip
  cd ${BASE_DIR}
  rm ${ZIP_NAME}
  zip -r ${ZIP_BASE} ${ZIP_BASE}/*
  rm -rf ${ZIP_BASE}

  echo
  echo "Release Generated!"
  if [[ ${set_version} = true ]]; then
    if [[ ${GIT_CHECK_RESULT} = false && ${push} = true ]]; then
      echo "  Not pushing because your working directory is dirty. Yuck."
    elif [[ ${push} = true ]]; then
      echo "  Pushing Gen Release v${new_version} commit."
      git commit -a -m "Gen Release v${new_version}"
      git tag -a v${new_version} -m "Version ${new_version} (Created On ${DATE})"
      git push
      git push --tags
    fi
  elif [[ ${push} = true ]]; then
    echo "  Pushing Gen Release commit."
    git c -a -m "Gen Release"
    git push
  fi
}

function pub {
  gen=false
  nightly=false
  push=''
  new_version=''
  for i in $*; do
    case "$i" in
      -gen|-g) gen=true;;
      -push|-p) push=$i;;
      -nightly|-n) nightly=true;;
      *) if [[ "$i" =~ ${VERSION_REGEX} ]]; then new_version=$i; else echo "ERROR: invalid option: $i"; usage; fi;;
    esac
  done

  if [[ ${gen} = true ]]; then
    gen ${new_version} ${push}
  fi

  cd ${BASE_DIR}

  if [[ ${nightly} = true ]]; then
    echo "Publishing the Nightly Release"
    echo "  Copying ${ZIP_NAME} to ~/Documents/Box\ Documents/X-Device/SDKs/Android/Nightly/${ZIP_BASE}-Nightly.zip"
    cp ${ZIP_NAME} ~/Documents/Box\ Documents/X-Device/SDKs/Android/Nightly/${ZIP_BASE}-Nightly.zip
  else
    echo "Publishing the Release"
    if [[ "`ls ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/ |grep ${ZIP_BASE}`" != "" ]]; then
      echo "  Removing Existing Release"
      rm ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/${ZIP_BASE}*
    fi

    version=`cat sdk/src/com/ooyala/android/Constants.java |grep "SDK_VERSION" |awk '{print $7}' |sed 's/"\([0-9]*\.[0-9]*\.[0-9]*\)";/\1/'`
    echo "  Copying ${ZIP_NAME} to ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/${ZIP_BASE}-${version}-${DATESTAMP}.zip"
    echo "  Copying ${ZIP_NAME} to ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/Versions/${ZIP_BASE}-${version}-${DATESTAMP}.zip"
    echo "  Copying ${ZIP_NAME} to ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/${ZIP_NAME}"
    cp ${ZIP_NAME} ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/${ZIP_BASE}-${version}-${DATESTAMP}.zip
    cp ${ZIP_NAME} ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/Versions/${ZIP_BASE}-${version}-${DATESTAMP}.zip
    cp ${ZIP_NAME} ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/${ZIP_NAME}
  fi
}

function tests {
  if [[ `ls ~/.android/avd/ |grep unit_test |wc |awk '{print $1}'` < 2 ]]; then
    echo "Please run '$0 setup' and try again."
    exit 1
  fi

  if [[ `${ADB} devices |grep -v "devices" |wc |awk '{print $1}'` < 3 ]]; then
    echo "Starting emulator..."
    ${EMULATOR} -avd ${AVD_NAME} &
  fi
  echo "Building Unit Tests..."
  currdir=`pwd`
  cd ${SDK_DIR}
  ant clean
  cd test-app
  ant clean
  cd ..
  cd tests
  ant clean
  ant debug
  if [[ `${ADB} devices |wc |awk '{print $1}'` < 3 ]]; then
    # We have to do this because sometimes ADB is stupid.
    echo "Restarting ADB..."
    ${ADB} kill-server
    ${ADB} start-server
    sleep 5
  fi
  echo "Running Unit Tests..."
  if [[ -f ${BASE_DIR}/test_results.txt ]]; then
    rm ${BASE_DIR}/test_results.txt
  fi
  echo "  Uninstalling apps..."
  echo "    TestApp:   `${ADB} wait-for-device uninstall com.ooyala.android.testapp`"
  echo "    UnitTests: `${ADB} wait-for-device uninstall com.ooyala.android.testapp.test`"
  echo "  Installing apps..."
  echo "    TestApp:"
  ${ADB} wait-for-device install ../test-app/bin/OoyalaAndroidTestAppActivity-debug-unaligned.apk
  echo "    UnitTests:"
  ${ADB} wait-for-device install bin/OoyalaAndroidTestAppActivityTest-debug-unaligned.apk
  ${ADB} wait-for-device shell am instrument -w com.ooyala.android.testapp.test/android.test.InstrumentationTestRunner 2>&1 |tee ${BASE_DIR}/test_results.txt
  if [[ "`cat ${BASE_DIR}/test_results.txt |egrep "OK \([0-9]+ tests\)"`" = "" ]]; then
    echo "Tests Failed!"
    echo "  Uninstalling apps..."
    echo "    TestApp:   `${ADB} wait-for-device uninstall com.ooyala.android.testapp`"
    echo "    UnitTests: `${ADB} wait-for-device uninstall com.ooyala.android.testapp.test`"
    cd ${currdir}
    exit 1
  fi
  echo "Tests Passed!"
  rm ${BASE_DIR}/test_results.txt
  echo "  Uninstalling apps..."
  echo "    TestApp:   `${ADB} wait-for-device uninstall com.ooyala.android.testapp`"
  echo "    UnitTests: `${ADB} wait-for-device uninstall com.ooyala.android.testapp.test`"
  cd ${currdir}
}

function setup {
  if [[ "${ANDROID_SDKS}" = "" ]]; then
    echo "Please set the environment variable ANDROID_SDKS to point to your Android platform SDK directory and try again."
    exit 1
  fi
  api_target_id=`${ANDROID_SDKS}/tools/android list targets |grep android-8 |awk '{print $2}'`
  if [[ "${api_target_id}" = "" ]]; then
    echo "Please install the Android API Level 8 SDK"
    exit 1
  fi

  noavd=false
  if [[ "$1" != "" ]]; then
    if [[ "$1" != "-noavd" && "$1" != "-na" ]]; then
      echo "ERROR: invalid option: $1"
      usage
    else
      noavd=true
    fi
  fi

  echo "sdk.dir=${ANDROID_SDKS}" > ${BASE_DIR}/sdk/local.properties
  cp ${BASE_DIR}/sdk/local.properties ${BASE_DIR}/sdk/test-app/local.properties
  cp ${BASE_DIR}/sdk/local.properties ${BASE_DIR}/sdk/tests/local.properties

  if [[ ${noavd} = true ]]; then
    echo "Not creating a new AVD..."
  else
    echo "--- IMPORTANT ---"
    echo "You are about to be asked if you want to create a custom hardware profile. Say yes. Use the default (just press enter) for everything except the following:"
    echo "  hw.lcd.density -> 240"
    echo "  hw.ramSize     -> 512"
    echo "  vm.heapSize    -> 48"
    echo
    sleep 2
    ${ANDROID} delete avd -n ${AVD_NAME}
    ${ANDROID} create avd -n ${AVD_NAME} -t ${api_target_id}
  fi
}

function usage {
  echo "$0 <task> <options>"
  echo "  tasks:"
  echo "    gen_docs|docs|doc|d       : generate the documentation"
  echo "    gen_release|gen|g         : generate the release"
  echo "      options:"
  echo "        -[notests|notest|nt]  : do not run the unit tests"
  echo "        -v<VERSION>           : update the version to <VERSION> where <VERSION> is in the form [0-9]+.[0-9]+.[0-9]+"
  echo "        -[push|p]             : push the generated release. Also create a tag if -v<VERSION> was specified"
  echo "    pub_release|publish|pub|p : publish the release"
  echo "      options:"
  echo "        -[gen|g]              : generate the release prior to publishing"
  echo "        -[nightly|n]          : publish the nightly version of the release"
  echo "        -v<VERSION>           : update the version to <VERSION> where <VERSION> is in the form [0-9]+.[0-9]+.[0-9]+"
  echo "        -[push|p]             : push the generated release. Also create a tag if -v<VERSION> was specified"
  echo "    run_tests|tests|test|t    : run the unit tests"
  echo "    setup|s                   : setup this repo for use by this script"
  echo "      options:"
  echo "        -[noavd|na]           : do not create a new avd"
  echo
  echo "For example, to generate, tag, and publish the release version 1.2.0: $0 pub -gen -v1.2.0 -push"
  exit 1
}

if [[ "${ANDROID_SDKS}" = "" ]]; then
  echo "Please set the environment variable ANDROID_SDKS to point to your Android platform SDK directory and try again."
  exit 1
fi
if [[ "`${ANDROID_SDKS}/tools/android list targets |grep android-8 |awk '{print $2}'`" = "" ]]; then
  echo "Please install the Android API Level 8 SDK"
  exit 1
fi

case "$1" in
  gen_release|gen|g) gen $2 $3;;
  gen_docs|docs|doc|d) doc;;
  pub_release|publish|pub|p) pub $2 $3 $4;;
  run_tests|tests|test|t) tests;;
  setup|s) setup $2;;
  *) usage;;
esac

cd ${BEGIN_DIR}
