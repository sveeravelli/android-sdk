#!/bin/bash

BEGINDIR=`pwd`
SCRIPTDIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BASEDIR=${SCRIPTDIR}/../
SDKDIR=${BASEDIR}/sdk
SAMPLEDIR=${BASEDIR}/sample-apps
JAR_BASE="OoyalaSDK"
JAR_NAME="${JAR_BASE}.jar"
ZIP_BASE="${JAR_BASE}-Android"
ZIP_NAME="${ZIP_BASE}.zip"
AVD_NAME="unit_test"

ADB=${ANDROID_SDKS}/platform-tools/adb
EMULATOR=${ANDROID_SDKS}/tools/emulator
ANDROID=${ANDROID_SDKS}/tools/android

# Generate the docs
function doc {
  currdir=`pwd`
  cd ${SDKDIR}
  echo
  echo "Removing Old Docs..."
  rm -rf Documentation/complete Documentation/public
  echo "Generating Public Docs..."
  javadoc -linkoffline http://d.android.com/reference file:${ANDROID_SDKS}/docs/reference @javadoc.public
  echo "Generating Complete Docs..."
  javadoc -linkoffline http://d.android.com/reference file:${ANDROID_SDKS}/docs/reference @javadoc.complete
  echo
  echo "Document Generation Complete!"
  echo
  cd ${currdir}
}

function git_check {
  cd ${BASEDIR}
  if [[ "`git status | grep "working directory clean"`" = "" ]]; then
    echo
    git status
    echo
    echo "Your working directory is not clean, are you sure you want to continue? (y/n)"
    read -n 1 cont
    if [[ "${cont}" != "y" ]]; then
      echo
      echo "Please commit or stash your changes and try again."
      exit 1
    fi
    echo
  fi
}

# Generate the release
function gen {
  echo "Generating the release..."
  git_check

  # Run tests before doing anything to make sure we are passing.
  if [[ "$1" != "" ]]; then
    if [[ "$1" != "-notests" && "$1" != "-notest" && "$1" != "-nt" ]]; then
      echo "ERROR: invalid option: $1"
      usage
    fi
  else
    tests
  fi

  cd ${BASEDIR}
  rm -rf ${ZIP_BASE}
  mkdir ${ZIP_BASE}

  #create jar
  cd ${SDKDIR}
  ant clean
  ant release
  cp bin/classes.jar ${BASEDIR}/${ZIP_BASE}/${JAR_NAME}

  #update sample apps
  cp ${BASEDIR}/${ZIP_BASE}/${JAR_NAME} ${SAMPLEDIR}/GettingStartedSampleApp/lib/
  cp ${BASEDIR}/${ZIP_BASE}/${JAR_NAME} ${SAMPLEDIR}/ChannelBrowserSampleApp/lib/

  #copy sample apps
  cd ${BASEDIR}
  cp -R ${SAMPLEDIR} ${ZIP_BASE}/SampleApps

  #getting started guide
  cp getting_started.pdf ${ZIP_BASE}/

  #version file
  version=`cat src/com/ooyala/android/Constants.java |grep "SDK_VERSION" |awk '{print $7}' |sed 's/"\([0-9]*\.[0-9]*\.[0-9]*\)";/\1/'`
  date=`date`
  echo "v${version}" >> ${ZIP_BASE}/VERSION
  echo "Created On: ${date}" >> ${ZIP_BASE}/VERSION

  #docs
  doc
  cp -R sdk/Documentation/public ${BASEDIR}/${ZIP_BASE}/Documentation

  #zip
  cd ${BASEDIR}
  rm ${ZIP_NAME}
  zip -r ${ZIP_BASE} ${ZIP_BASE}/*
  rm -rf ${ZIP_BASE}
  echo
  echo "Release Generated!"
}

function pub {
  if [[ "$1" != "" ]]; then
    if [[ "$1" != "-gen" && "$1" != "-g" && "$1" != "-nightly" && "$1" != "-n" ]]; then
      echo "ERROR: invalid option: $1"
      usage
    fi
  fi
  if [[ "$2" != "" ]]; then
    if [[ "$2" != "-gen" && "$2" != "-g" && "$2" != "-nightly" && "$2" != "-n" ]]; then
      echo "ERROR: invalid option: $2"
      usage
    fi
  fi

  if [[ "$1" = "-gen" || "$1" = "-g" || "$2" = "-gen" || "$2" = "-g" ]]; then
    gen
  fi

  cd ${BASEDIR}

  if [[ "$1" = "-nightly" || "$1" = "-n" || "$2" = "-nightly" || "$2" = "-n" ]]; then
    echo "Publishing the Nightly Release"
    echo "  Copying ${ZIP_NAME} to ~/Documents/Box\ Documents/X-Device/SDKs/Android/Nightly/${ZIP_BASE}-Nightly.zip"
    cp ${ZIP_NAME} ~/Documents/Box\ Documents/X-Device/SDKs/Android/Nightly/${ZIP_BASE}-Nightly.zip
  else
    echo "Publishing the Release"
    if [[ "`ls ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/ |grep ${ZIP_BASE}`" != "" ]]; then
      echo "  Removing Existing Release"
      rm ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/${ZIP_BASE}*
    fi

    version=`cat sdk/src/com/ooyala/android/Constants.java |grep "SDK_VERSION" |awk '{print $7}' |sed 's/"\([0-9]*\.[0-9]*\.[0-9]*\)";/\1/'`
    date=`date +%Y%m%d%H%M%S`
    echo "  Copying ${ZIP_NAME} to ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/${ZIP_BASE}-${version}-${date}.zip"
    echo "  Copying ${ZIP_NAME} to ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/Versions/${ZIP_BASE}-${version}-${date}.zip"
    echo "  Copying ${ZIP_NAME} to ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/${ZIP_NAME}"
    cp ${ZIP_NAME} ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/${ZIP_BASE}-${version}-${date}.zip
    cp ${ZIP_NAME} ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/Versions/${ZIP_BASE}-${version}-${date}.zip
    cp ${ZIP_NAME} ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/${ZIP_NAME}
  fi
}

function tests {
  if [[ `ls ~/.android/avd/ |grep unit_test |wc |awk '{print $1}'` < 2 ]]; then
    echo "Please run '$0 setup' and try again."
    exit 1
  fi

  if [[ `${ADB} devices |wc |awk '{print $1}'` < 3 ]]; then
    echo "Starting emulator..."
    ${EMULATOR} -avd ${AVD_NAME} &
  fi
  echo "Building Unit Tests..."
  currdir=`pwd`
  cd ${SDKDIR}
  ant clean
  cd test-app
  ant clean
  cd ..
  cd tests
  ant clean
  ant debug
  echo "Restarting ADB..."
  # We have to do this because sometimes ADB is stupid.
  ${ADB} kill-server
  ${ADB} start-server
  sleep 5
  echo "Running Unit Tests..."
  if [[ -f ${BASEDIR}/test_results.txt ]]; then
    rm ${BASEDIR}/test_results.txt
  fi
  echo "  Uninstalling apps..."
  echo "    TestApp:   `${ADB} wait-for-device uninstall com.ooyala.android.testapp`"
  echo "    UnitTests: `${ADB} wait-for-device uninstall com.ooyala.android.testapp.test`"
  echo "  Installing apps..."
  echo "    TestApp:"
  ${ADB} wait-for-device install ../test-app/bin/OoyalaAndroidTestAppActivity-debug-unaligned.apk
  echo "    UnitTests:"
  ${ADB} wait-for-device install bin/OoyalaAndroidTestAppActivityTest-debug-unaligned.apk
  ${ADB} wait-for-device shell am instrument -w com.ooyala.android.testapp.test/android.test.InstrumentationTestRunner 2>&1 |tee ${BASEDIR}/test_results.txt
  if [[ "`cat ${BASEDIR}/test_results.txt |egrep "OK \([0-9]+ tests\)"`" = "" ]]; then
    echo "Tests Failed!"
    echo "  Uninstalling apps..."
    echo "    TestApp:   `${ADB} wait-for-device uninstall com.ooyala.android.testapp`"
    echo "    UnitTests: `${ADB} wait-for-device uninstall com.ooyala.android.testapp.test`"
    cd ${currdir}
    exit 1
  fi
  echo "Tests Passed!"
  rm ${BASEDIR}/test_results.txt
  echo "  Uninstalling apps..."
  echo "    TestApp:   `${ADB} wait-for-device uninstall com.ooyala.android.testapp`"
  echo "    UnitTests: `${ADB} wait-for-device uninstall com.ooyala.android.testapp.test`"
  cd ${currdir}
}

function setup {
  if [[ "${ANDROID_SDKS}" = "" ]]; then
    echo "Please set the environment variable ANDROID_SDKS to point to your Android platform SDK directory and try again."
    exit 1
  fi
  api_target_id=`${ANDROID_SDKS}/tools/android list targets |grep android-8 |awk '{print $2}'`
  if [[ "${api_target_id}" = "" ]]; then
    echo "Please install the Android API Level 8 SDK"
    exit 1
  fi

  noavd=false
  if [[ "$1" != "" ]]; then
    if [[ "$1" != "-noavd" && "$1" != "-na" ]]; then
      echo "ERROR: invalid option: $1"
      usage
    else
      noavd=true
    fi
  fi

  echo "sdk.dir=${ANDROID_SDKS}" > ${BASEDIR}/sdk/local.properties
  cp ${BASEDIR}/sdk/local.properties ${BASEDIR}/sdk/test-app/local.properties
  cp ${BASEDIR}/sdk/local.properties ${BASEDIR}/sdk/tests/local.properties

  if [[ ${noavd} ]]; then
    echo "Not creating a new AVD..."
  else
    echo "--- IMPORTANT ---"
    echo "You are about to be asked if you want to create a custom hardware profile. Say yes. Use the default (just press enter) for everything except the following:"
    echo "  hw.lcd.density -> 240"
    echo "  hw.ramSize     -> 512"
    echo "  vm.heapSize    -> 48"
    echo
    sleep 2
    ${ANDROID} delete avd -n ${AVD_NAME}
    ${ANDROID} create avd -n ${AVD_NAME} -t ${api_target_id}
  fi
}

function usage {
  echo "$0 <task> <options>"
  echo "  tasks:"
  echo "    gen_docs|docs|doc|d       : generate the documentation"
  echo "    gen_release|gen|g         : generate the release"
  echo "      options:"
  echo "        -[notests|notest|nt]  : do not run the unit tests"
  echo "    pub_release|publish|pub|p : publish the release"
  echo "      options:"
  echo "        -[gen|g]              : generate the release prior to publishing"
  echo "        -[nightly|n]          : publish the nightly version of the release"
  echo "    run_tests|tests|test|t    : run the unit tests"
  echo "    setup|s                   : setup this repo for use by this script"
  echo "      options:"
  echo "        -[noavd|na]           : do not create a new avd"
  exit 1
}

if [[ "${ANDROID_SDKS}" = "" ]]; then
  echo "Please set the environment variable ANDROID_SDKS to point to your Android platform SDK directory and try again."
  exit 1
fi
if [[ "`${ANDROID_SDKS}/tools/android list targets |grep android-8 |awk '{print $2}'`" = "" ]]; then
  echo "Please install the Android API Level 8 SDK"
  exit 1
fi

case "$1" in
  gen_release|gen|g) gen $2;;
  gen_docs|docs|doc|d) doc;;
  pub_release|publish|pub|p) pub $2 $3;;
  run_tests|tests|test|t) tests;;
  setup|s) setup;;
  *) usage;;
esac

cd ${BEGINDIR}
