#!/bin/bash

BEGINDIR=`pwd`
BINDIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BASEDIR=$BINDIR/../
SDKDIR=$BASEDIR/sdk
SAMPLEDIR=$BASEDIR/sample-apps
JAR_BASE="OoyalaSDK"
JAR_NAME="${JAR_BASE}.jar"
ZIP_BASE="${JAR_BASE}-Android"
ZIP_NAME="${ZIP_BASE}.zip"

# Generate the docs
function doc {
  CURRDIR=`pwd`
  cd $SDKDIR
  echo
  echo "Removing Old Docs..."
  rm -rf Documentation/complete Documentation/public
  echo "Generating Public Docs..."
  javadoc -linkoffline http://d.android.com/reference file:${ANDROID_SDKS}/docs/reference @javadoc.public
  echo "Generating Complete Docs..."
  javadoc -linkoffline http://d.android.com/reference file:${ANDROID_SDKS}/docs/reference @javadoc.complete
  echo
  echo "Document Generation Complete!"
  echo
  cd $CURRDIR
}

# Generate the release
function gen {
  # Run tests before doing anything to make sure we are passing.
  tests

  cd $BASEDIR
  rm -rf ${ZIP_BASE}
  mkdir ${ZIP_BASE}

  #create jar
  cd $SDKDIR
  ant clean
  ant release
  cp bin/classes.jar $BASEDIR/${ZIP_BASE}/${JAR_NAME}

  #update sample apps
  cp $BASEDIR/${ZIP_BASE}/${JAR_NAME} $SAMPLEDIR/GettingStartedSampleApp/lib/
  cp $BASEDIR/${ZIP_BASE}/${JAR_NAME} $SAMPLEDIR/ChannelBrowserSampleApp/lib/

  #copy sample apps
  cd $BASEDIR
  cp -R $SAMPLEDIR ${ZIP_BASE}/SampleApps

  #getting started guide
  cp getting_started.pdf ${ZIP_BASE}/

  #version file
  VERSION=`cat src/com/ooyala/android/Constants.java |grep "SDK_VERSION" |awk '{print $7}' |sed 's/"\([0-9]*\.[0-9]*\.[0-9]*\)";/\1/'`
  DATE=`date`
  echo "v$VERSION" >> ${ZIP_BASE}/VERSION
  echo "Created On: $DATE" >> ${ZIP_BASE}/VERSION

  #docs
  doc
  cp -R sdk/Documentation/public $BASEDIR/${ZIP_BASE}/Documentation

  #zip
  cd $BASEDIR
  rm ${ZIP_NAME}
  zip -r ${ZIP_BASE} ${ZIP_BASE}/*
  rm -rf ${ZIP_BASE}
}

function pub {
  if [[ "$1" != "" ]]; then
    if [[ "$1" != "-gen" && "$1" != "-g" && "$1" != "-nightly" && "$1" != "-n" ]]; then
      echo "ERROR: invalid option: $1"
      usage
    fi
  fi
  if [[ "$2" != "" ]]; then
    if [[ "$2" != "-gen" && "$2" != "-g" && "$2" != "-nightly" && "$2" != "-n" ]]; then
      echo "ERROR: invalid option: $2"
      usage
    fi
  fi

  if [[ "$1" = "-gen" || "$1" = "-g" || "$2" = "-gen" || "$2" = "-g" ]]; then
    gen
  fi

  cd $BASEDIR

  if [[ "$1" = "-nightly" || "$1" = "-n" || "$2" = "-nightly" || "$2" = "-n" ]]; then
    cp ${ZIP_NAME} ~/Documents/Box\ Documents/X-Device/SDKs/Android/Nightly/${ZIP_BASE}-Nightly.zip
  else
    if [[ "`ls ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/ |grep ${ZIP_BASE}`" != "" ]]; then
      rm ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/${ZIP_BASE}*
    fi

    VERSION=`cat sdk/src/com/ooyala/android/Constants.java |grep "SDK_VERSION" |awk '{print $7}' |sed 's/"\([0-9]*\.[0-9]*\.[0-9]*\)";/\1/'`
    DATE=`date +%Y%m%d%H%M%S`
    cp ${ZIP_NAME} ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/${ZIP_BASE}-${VERSION}-${DATE}.zip
    cp ${ZIP_NAME} ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/Versions/${ZIP_BASE}-${VERSION}-${DATE}.zip
    cp ${ZIP_NAME} ~/Documents/Box\ Documents/X-Device/SDKs/Android/Release/${ZIP_NAME}
  fi
}

function tests {
  echo "Running Unit Tests..."
  CURRDIR=`pwd`
  cd $SDKDIR
  ant clean
  cd test-app
  ant clean
  cd ..
  cd tests
  ant clean
  ant debug
  adb install ../test-app/bin/OoyalaAndroidTestAppActivity-debug-unaligned.apk
  adb install bin/OoyalaAndroidTestAppActivityTest-debug-unaligned.apk 
  adb shell am instrument -w com.ooyala.android.testapp.test/android.test.InstrumentationTestRunner 2>&1 |tee $BASEDIR/test_results.txt
  if [[ "`cat $BASEDIR/test_results.txt |grep error`" != "" || "`cat $BASEDIR/test_results.txt |grep FAIL`" != "" ]]; then
    echo "Tests Failed!"
    cd $CURRDIR
    exit
  fi
  echo "Tests Passed!"
  rm $BASEDIR/test_results.txt
  cd $CURRDIR
}

function usage {
  echo "$0 <task> <options>"
  echo "  tasks:"
  echo "    gen_docs|docs|doc|d       : generate the documentation"
  echo "    gen_release|gen|g         : generate the release"
  echo "    pub_release|publish|pub|p : publish the release"
  echo "      options:"
  echo "        -[gen|g]     : generate the release prior to publishing"
  echo "        -[nightly|n] : publish the nightly version of the release"
  echo "    run_tests|tests|test|t    : run the unit tests"
  exit
}

case "$1" in
  gen_release|gen|g) gen;;
  gen_docs|docs|doc|d) doc;;
  pub_release|publish|pub|p) pub $2 $3;;
  run_tests|tests|test|t) tests;;
  *) usage;;
esac

cd $BEGINDIR
