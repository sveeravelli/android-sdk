#!/bin/bash

BEGIN_DIR=`pwd`
SCRIPT_DIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PLATFORM_NAME="Android"
source ${SCRIPT_DIR}/sdk-helper.sh
JAR_NAME="${LIB_BASE}.jar"
IMA_JAR_NAME="${IMA_LIB_BASE}.jar"
FW_JAR_NAME="${FW_LIB_BASE}.jar"
AVD_NAME="unit_test"
ADB=${ANDROID_SDKS}/platform-tools/adb
EMULATOR=${ANDROID_SDKS}/tools/emulator
ANDROID=${ANDROID_SDKS}/tools/android
DOCS_CLASSPATH=${ANDROID_SDKS}/tools/support/annotations.jar

function get_version {
  echo `cat ${SDK_DIR}/src/com/ooyala/android/Constants.java |grep "SDK_VERSION" |awk '{print $7}' |sed 's/"\([0-9]*\.[0-9]*\.[0-9]*\)_RC[0-9]*";/\1/'`
}

function get_rc {
  echo `cat ${SDK_DIR}/src/com/ooyala/android/Constants.java |grep "SDK_VERSION" |awk '{print $7}' |sed 's/"[0-9]*\.[0-9]*\.[0-9]*_RC\([0-9]*\)";/\1/'`
}
function set_version {
  new_version=$1
  sed -i '' -e "s/\(SDK_VERSION *= *\)\".*\"/\1\"${new_version}\"/g" ${SDK_DIR}/src/com/ooyala/android/Constants.java
}

function public_docs {
  currdir=`pwd`
  cd ${SDK_DIR}
  javadoc -linkoffline http://d.android.com/reference file:${ANDROID_SDKS}/docs/reference @javadoc.public -classpath ${DOCS_CLASSPATH} > /dev/null 2>&1

  cd ${IMA_SDK_DIR}
  javadoc -linkoffline http://d.android.com/reference file:${ANDROID_SDKS}/docs/reference @javadoc.public -classpath ${DOCS_CLASSPATH} > /dev/null 2>&1

  cd ${FW_SDK_DIR}
  javadoc -linkoffline http://d.android.com/reference file:${ANDROID_SDKS}/docs/reference @javadoc.public -classpath ${DOCS_CLASSPATH} > /dev/null 2>&1
  cd "${currdir}"
}

function complete_docs {
  currdir=`pwd`
  cd ${SDK_DIR}
  javadoc -linkoffline http://d.android.com/reference file:${ANDROID_SDKS}/docs/reference @javadoc.complete -classpath ${DOCS_CLASSPATH} > /dev/null 2>&1

  cd ${IMA_SDK_DIR}
  javadoc -linkoffline http://d.android.com/reference file:${ANDROID_SDKS}/docs/reference @javadoc.complete -classpath ${DOCS_CLASSPATH} > /dev/null 2>&1

  cd ${FW_SDK_DIR}
  javadoc -linkoffline http://d.android.com/reference file:${ANDROID_SDKS}/docs/reference @javadoc.complete -classpath ${DOCS_CLASSPATH} > /dev/null 2>&1
  cd "${currdir}"
}

function custom_verify {
  if [[ ! ( -f "${ZIP_BASE}/${JAR_NAME}" ) ]]; then
    echo "ERROR: jar not included"
    exit 1
  fi
}

function custom_gen {
  currdir=`pwd`

  #create jar
  cd ${SDK_DIR}
  ant clean
  ant release
  cp bin/classes.jar ${BASE_DIR}/${ZIP_BASE}/${JAR_NAME}

  #create IMA jar
  cd ${IMA_SDK_DIR}
  ant clean
  ant release
  ant jar
  cp OoyalaIMASDK.jar ${BASE_DIR}/${IMA_ZIP_BASE}/
  #update IMA Sample App
  cp OoyalaIMASDK.jar ${THIRD_PARTY_SAMPLE_DIR}/IMASampleApp/libs/
  cp ${BASE_DIR}/${ZIP_BASE}/${JAR_NAME} ${THIRD_PARTY_SAMPLE_DIR}/IMASampleApp/libs/
  rm OoyalaIMASDK.jar

  #create Freewheel jar
  cd ${FW_SDK_DIR}
  ant clean
  ant release
  cp bin/classes.jar OoyalaFreewheelSDK.jar
  cp OoyalaFreewheelSDK.jar ${BASE_DIR}/${FW_ZIP_BASE}/
  #update Freewheel Sample App
  cp OoyalaFreewheelSDK.jar ${THIRD_PARTY_SAMPLE_DIR}/FreewheelSampleApp/libs/
  cp ${BASE_DIR}/${ZIP_BASE}/${JAR_NAME} ${THIRD_PARTY_SAMPLE_DIR}/FreewheelSampleApp/libs/
  rm OoyalaFreewheelSDK.jar

  #update sample apps
  cp ${BASE_DIR}/${ZIP_BASE}/${JAR_NAME} ${SAMPLE_DIR}/GettingStartedSampleApp/libs/
  cp ${BASE_DIR}/${ZIP_BASE}/${JAR_NAME} ${SAMPLE_DIR}/ChannelBrowserSampleApp/libs/
  cp ${BASE_DIR}/${ZIP_BASE}/${JAR_NAME} ${SAMPLE_DIR}/OOView/libs/
  cp ${BASE_DIR}/${ZIP_BASE}/${JAR_NAME} ${SAMPLE_DIR}/AdobePassDemoApp/libs/
  cp ${BASE_DIR}/${ZIP_BASE}/${JAR_NAME} ${SAMPLE_DIR}/DeviceManagementSampleApp/libs/

  #update third party sample apps
  cp ${BASE_DIR}/${ZIP_BASE}/${JAR_NAME} ${THIRD_PARTY_SAMPLE_DIR}/OmnitureSampleApp/libs/

  #default controls
  mkdir ${BASE_DIR}/${ZIP_BASE}/DefaultControlsSource
  cp ${SDK_DIR}/src/com/ooyala/android/ui/* ${BASE_DIR}/${ZIP_BASE}/DefaultControlsSource

  cd "${currdir}"
}

function custom_tests {
  currdir=`pwd`

  testfile=$1
  if [[ `ls ~/.android/avd/ |grep unit_test |wc |awk '{print $1}'` < 2 ]]; then
    echo "Please run '$0 setup' and try again."
    cd "${currdir}"
    exit 1
  fi

  if [[ `${ADB} devices |grep -v "devices" |grep -v "daemon" |grep -v -e "^$" |wc |awk '{print $1}'` < 1 ]]; then
    echo "Starting emulator..."
    ${EMULATOR} -avd ${AVD_NAME} &
  fi
  echo "Building Unit Tests..."
  currdir=`pwd`
  cd ${SDK_DIR}
  ant clean
  cd test-app
  ant clean
  cd ..
  cd tests
  ant clean
  ant debug
  if [[ `${ADB} devices |grep -v "devices" |grep -v "daemon" |grep -v -e "^$" |wc |awk '{print $1}'` < 1 ]]; then
    # We have to do this because sometimes ADB is stupid.
    echo "Restarting ADB..."
    ${ADB} kill-server
    ${ADB} start-server
    sleep 5
  fi
  echo "  Uninstalling apps..."
  echo "    TestApp:   `${ADB} wait-for-device uninstall com.ooyala.android.testapp`"
  echo "    UnitTests: `${ADB} wait-for-device uninstall com.ooyala.android.testapp.test`"
  echo "  Installing apps..."
  echo "    TestApp:"
  ${ADB} wait-for-device install ../test-app/bin/OoyalaAndroidTestAppActivity-debug-unaligned.apk
  echo "    UnitTests:"
  ${ADB} wait-for-device install bin/OoyalaAndroidTestAppActivityTest-debug-unaligned.apk
  ${ADB} wait-for-device shell am instrument -w com.ooyala.android.testapp.test/android.test.InstrumentationTestRunner 2>&1 |tee ${testfile}
  echo "  Uninstalling apps..."
  echo "    TestApp:   `${ADB} wait-for-device uninstall com.ooyala.android.testapp`"
  echo "    UnitTests: `${ADB} wait-for-device uninstall com.ooyala.android.testapp.test`"
  cd "${currdir}"
  if [[ "`cat ${testfile} |egrep "OK \([0-9]+ tests\)"`" = "" ]]; then
    return 1
  fi
  return 0
}

function setup {
  if [[ "${ANDROID_SDKS}" = "" ]]; then
    echo "Please set the environment variable ANDROID_SDKS to point to your Android platform SDK directory and try again."
    exit 1
  fi
  api_target_id=`${ANDROID_SDKS}/tools/android list targets |grep android-8 |awk '{print $2}'`
  if [[ "${api_target_id}" = "" ]]; then
    echo "Please install the Android API Level 8 SDK"
    exit 1
  fi

  noavd=false
  if [[ "$1" != "" ]]; then
    if [[ "$1" != "-noavd" && "$1" != "-na" ]]; then
      echo "ERROR: invalid option: $1"
      usage
    else
      noavd=true
    fi
  fi

  echo "sdk.dir=${ANDROID_SDKS}" > ${BASE_DIR}/sdk/local.properties
  cp ${BASE_DIR}/sdk/local.properties ${BASE_DIR}/sdk/test-app/local.properties
  cp ${BASE_DIR}/sdk/local.properties ${BASE_DIR}/sdk/tests/local.properties
  cp ${BASE_DIR}/sdk/local.properties ${IMA_SDK_DIR}/local.properties
  cp ${BASE_DIR}/sdk/local.properties ${FW_SDK_DIR}/local.properties

  if [[ ${noavd} = true ]]; then
    echo "Not creating a new AVD..."
  else
    echo "--- IMPORTANT ---"
    echo "You are about to be asked if you want to create a custom hardware profile. Say yes. Use the default (just press enter) for everything except the following:"
    echo "  hw.lcd.density -> 240"
    echo "  hw.ramSize     -> 512"
    echo "  vm.heapSize    -> 48"
    echo
    sleep 2
    ${ANDROID} delete avd -n ${AVD_NAME}
    ${ANDROID} create avd -n ${AVD_NAME} -t ${api_target_id}
  fi
}

function custom_usage {
  echo "    setup|s                   : setup this repo for use by this script"
  echo "      options:"
  echo "        -[noavd|na]           : do not create a new avd"
  echo
}

if [[ "${ANDROID_SDKS}" = "" ]]; then
  echo "Please set the environment variable ANDROID_SDKS to point to your Android platform SDK directory and try again."
  exit 1
fi
if [[ "`${ANDROID_SDKS}/tools/android list targets |grep android-8 |awk '{print $2}'`" = "" ]]; then
  echo "Please install the Android API Level 8 SDK"
  exit 1
fi

case "$1" in
  gen_release|gen|g) shift; gen $*;;
  gen_docs|docs|doc|d) doc;;
  pub_release|publish|pub|p) shift; pub $*;;
  run_tests|tests|test|t) tests;;
  setup|s) setup $2;;
  *) usage;;
esac

cd ${BEGIN_DIR}
